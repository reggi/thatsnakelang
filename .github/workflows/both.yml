on:
  push:
    branches:
      - main

jobs:
  root-dist-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Ensure dist folder exists
        run: mkdir -p dist

      - name: Build root release distributions
        run: |
          pip install --upgrade setuptools wheel
          python setup.py sdist bdist_wheel

      - name: Upload root distributions
        uses: actions/upload-artifact@v4
        with:
          name: root-release-dists
          path: dist/

  nested-dist-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Ensure nested dist folder exists
        run: mkdir -p nested/dist

      - name: Build nested release distributions
        run: |
          pip install --upgrade setuptools wheel
          cd nested
          python setup.py sdist bdist_wheel

      - name: Upload nested distributions
        uses: actions/upload-artifact@v4
        with:
          name: nested-release-dists
          path: nested/dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - root-dist-build
      - nested-dist-build
    permissions:
      id-token: write

    steps:
      - name: Retrieve root release distributions
        uses: actions/download-artifact@v4
        with:
          name: root-release-dists
          path: dist/

      - name: Retrieve nested release distributions
        uses: actions/download-artifact@v4
        with:
          name: nested-release-dists
          path: nested/dist/

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Mint API token
        id: mint-token
        run: |
          # retrieve the ambient OIDC token
          resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          oidc_token=$(jq -r '.value' <<< "${resp}")

          # exchange the OIDC token for an API token
          resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq -r '.token' <<< "${resp}")

          # mask the newly minted API token, so that we don't accidentally leak it
          echo "::add-mask::${api_token}"

          # see the next step in the workflow for an example of using this step output
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"

      - name: Publish root release distributions to PyPI
        # gh-action-pypi-publish uses TWINE_PASSWORD automatically
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ steps.mint-token.outputs.api-token }}
          packages-dir: dist/

      - name: Publish nested release distributions to PyPI
        # gh-action-pypi-publish uses TWINE_PASSWORD automatically
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ steps.mint-token.outputs.api-token }}
          packages-dir: nested/dist/